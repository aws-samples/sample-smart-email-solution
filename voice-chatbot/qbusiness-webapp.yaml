AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation Q Business web app'
Parameters:
  
  AuthName:
    Type: String
    Description: Unique Auth Name for Cognito Resources
    AllowedPattern: ^[a-z0-9]+$
    ConstraintDescription: May only include lowercase, alphanumeric characters
  QApplicationId:
    Type: String
    Description: Q Application Id
  IdcApplicationArn:
    Type: String
    Description: Identity Center customer application ARN.
    Default: ""
    
Resources:
  QManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowQChat
          Effect: Allow
          Action:
          - "qbusiness:ChatSync"
          Resource: !Sub "arn:${AWS::Partition}:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QApplicationId}"
        
  QServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS:
            - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
          Action:
          - sts:AssumeRole
          - sts:SetContext
      Path: /
      ManagedPolicyArns:
      - !Ref QManagedPolicy
  
  EC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole    
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  
  EC2ServicePolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      guard:
        SuppressedRules:
          - IAM_POLICYDOCUMENT_NO_WILDCARD_RESOURCE # CreateTokenWithIAM requires wildcard
    Properties:
      Roles:
        - !Ref EC2ServiceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowAssumeQRole
          Effect: Allow
          Action:
          - "sts:AssumeRole"
          - "sts:SetContext"
          Resource: !GetAtt QServiceRole.Arn
        - Sid: AllowTokenExchange
          Effect: Allow
          Action:
            - "sso-oauth:CreateTokenWithIAM"
          Resource: "*" 

  UserPool:
    Type: AWS::Cognito::UserPool
    Metadata:
      guard:
        SuppressedRules:
          - COGNITO_USER_POOL_MFA_CONFIGURATION_RULE # Not required for the demo
    Properties:
      UserPoolName: !Sub ${AuthName}-user-pool
      AutoVerifiedAttributes:
      - email
      MfaConfiguration: "OFF"
      Schema:
      - Name: email
        AttributeDataType: String
        Mutable: false
        Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AuthName}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows:
      - code
      AllowedOAuthScopes:
      - openid
      SupportedIdentityProviders:
      - COGNITO
      CallbackURLs:
      - "http://localhost:3000/callback"

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub ${AuthName}-dns-testname

Outputs:
  TrustedIssuerUrl:
    Description: Endpoint of the trusted issuer to setup Identity Center
    Value: !GetAtt UserPool.ProviderURL
  Audience:
    Description: Audience to setup customer application in Identity Center
    Value: !Ref UserPoolClient
  RoleArn:
    Description: "ARN of the IAM role required to setup token exchange in Identity Center"
    Value: !GetAtt EC2ServiceRole.Arn
