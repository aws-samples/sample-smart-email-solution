#!/bin/bash

# Generate Copilot worker configurations for container splitting
# Usage: ./generate-workers.sh <number_of_workers>

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check arguments
if [ $# -ne 1 ]; then
    echo "Usage: $0 <number_of_workers>"
    echo "Example: $0 5"
    exit 1
fi

NUM_WORKERS=$1

# Validate number of workers
if ! [[ "$NUM_WORKERS" =~ ^[0-9]+$ ]] || [ "$NUM_WORKERS" -lt 1 ] || [ "$NUM_WORKERS" -gt 20 ]; then
    echo "Error: Number of workers must be between 1 and 20"
    exit 1
fi

print_status "Generating $NUM_WORKERS worker configurations..."

# Create worker configurations
for ((i=1; i<=NUM_WORKERS; i++)); do
    WORKER_NAME="exchange-sync-worker-$i"
    WORKER_DIR="copilot/$WORKER_NAME"
    CONTAINER_INDEX=$((i-1))  # 0-based index
    
    print_status "Creating worker $i (container index: $CONTAINER_INDEX)"
    
    # Create directory
    mkdir -p "$WORKER_DIR"
    
    # Copy and modify the main exchange-sync configuration
    cp "copilot/exchange-sync/copilot.yml" "$WORKER_DIR/copilot.yml"
    
    # Update the worker configuration for macOS/Linux compatibility
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        sed -i '' "s/name: exchange-sync/name: $WORKER_NAME/" "$WORKER_DIR/copilot.yml"
        sed -i '' "s/CONTAINER_INDEX: \"0\"/CONTAINER_INDEX: \"$CONTAINER_INDEX\"/" "$WORKER_DIR/copilot.yml"
        sed -i '' "s/TOTAL_CONTAINERS: \"1\"/TOTAL_CONTAINERS: \"$NUM_WORKERS\"/" "$WORKER_DIR/copilot.yml"
    else
        # Linux
        sed -i "s/name: exchange-sync/name: $WORKER_NAME/" "$WORKER_DIR/copilot.yml"
        sed -i "s/CONTAINER_INDEX: \"0\"/CONTAINER_INDEX: \"$CONTAINER_INDEX\"/" "$WORKER_DIR/copilot.yml"
        sed -i "s/TOTAL_CONTAINERS: \"1\"/TOTAL_CONTAINERS: \"$NUM_WORKERS\"/" "$WORKER_DIR/copilot.yml"
    fi

    print_success "Created $WORKER_DIR/copilot.yml"
done

# Generate deployment commands
print_status "Generating deployment script..."

cat > "deploy-workers.sh" << EOF
#!/bin/bash

# Deploy all $NUM_WORKERS workers
# Generated by generate-workers.sh

set -e

ENVIRONMENT=\${1:-production}

echo "Deploying $NUM_WORKERS workers to environment: \$ENVIRONMENT"

EOF

for ((i=1; i<=NUM_WORKERS; i++)); do
    WORKER_NAME="exchange-sync-worker-$i"
    cat >> "deploy-workers.sh" << EOF
echo "Deploying $WORKER_NAME..."
copilot svc init $WORKER_NAME
copilot svc deploy --name $WORKER_NAME --env \$ENVIRONMENT

EOF
done

cat >> "deploy-workers.sh" << EOF
echo "All workers deployed successfully!"
echo ""
echo "Monitor logs with:"
EOF

for ((i=1; i<=NUM_WORKERS; i++)); do
    WORKER_NAME="exchange-sync-worker-$i"
    cat >> "deploy-workers.sh" << EOF
echo "  copilot svc logs --name $WORKER_NAME --env \$ENVIRONMENT"
EOF
done

chmod +x "deploy-workers.sh"
print_success "Created deploy-workers.sh"

# Generate account assignment preview
print_status "Account assignment preview (example with 10 accounts):"
echo ""

EXAMPLE_ACCOUNTS=("user1@domain.com" "user2@domain.com" "user3@domain.com" "user4@domain.com" "user5@domain.com" "user6@domain.com" "user7@domain.com" "user8@domain.com" "user9@domain.com" "user10@domain.com")

for ((i=0; i<NUM_WORKERS; i++)); do
    WORKER_NUM=$((i+1))
    ASSIGNED_ACCOUNTS=()
    
    for ((j=0; j<10; j++)); do
        if [ $((j % NUM_WORKERS)) -eq $i ]; then
            ASSIGNED_ACCOUNTS+=("${EXAMPLE_ACCOUNTS[j]}")
        fi
    done
    
    echo "  Worker $WORKER_NUM (index $i): ${ASSIGNED_ACCOUNTS[*]}"
done

echo ""
print_success "Generated $NUM_WORKERS worker configurations"
print_warning "Remember to update Parameter Store with your actual email accounts"

echo ""
echo "Next steps:"
echo "1. Update copilot/environments/addons/parameter-store.yml with your configuration"
echo "2. Run: ./deploy-workers.sh [environment]"
echo "3. Monitor the deployment: copilot svc ls"